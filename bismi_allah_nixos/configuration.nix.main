#in the name of Allah
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

# default pkgs are in pkgs	      | sudo nix-channel --add https://channels.nixos.org/nixos-24.05 nixos
# unstable pkgs are in pkgs-unstable  | sudo nix-channel --add https://channels.nixos.org/nixos-24.05 nixpkgs-unstable
# stable pkgs are in pkgs-stable      | sudo nix-channel --add https://channels.nixos.org/nixos-unstable nixpkgs-stable
{ config, pkgs, audio, ... }:

let 
  pkgs-unstable = import <nixpkgs-unstable> { 
    config = {
      allowUnfree = true;
    };
  };
  pkgs-stable = import <nixpkgs-stable> { 
    config = {
      allowUnfree = true;
    };
  };
in
{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  users.extraUsers.ibrahimo.extraGroups = ["audio"];

  networking.hostName = "ibrahimo"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;
  systemd.services.NetworkManager-wait-online.enable = pkgs.lib.mkForce false;

  # Set your time zone.
  time.timeZone = "Africa/Casablanca";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "ar_MA.UTF-8";
    LC_IDENTIFICATION = "ar_MA.UTF-8";
    LC_MEASUREMENT = "ar_MA.UTF-8";
    LC_MONETARY = "ar_MA.UTF-8";
    LC_NAME = "ar_MA.UTF-8";
    LC_NUMERIC = "ar_MA.UTF-8";
    LC_PAPER = "ar_MA.UTF-8";
    LC_TELEPHONE = "ar_MA.UTF-8";
    LC_TIME = "ar_MA.UTF-8";
  };

  # Configure keymap in X11
  services.xserver = {
    xkb.layout = "us";
    xkb.variant = "";
  };

#Sound
#hardware.pulseaudio.package = pkgs.pulseaudioFull; # support for bluetooth headsets
hardware.pulseaudio.enable = false;
#hardware.pulseaudio.support32Bit = true;    ## If compatibility with 32-bit applications is desired.
#nixpkgs.config.pulseaudio = true;

hardware.bluetooth.enable = true;
services.blueman.enable = true;

security.rtkit.enable = true;
  services.pipewire = {
  enable = true;
  alsa.enable = true;
  alsa.support32Bit = true;
  pulse.enable = true;
};
environment.etc = {
	"wireplumber/bluetooth.lua.d/51-bluez-config.lua".text = ''
		bluez_monitor.properties = {
			["bluez5.enable-sbc-xq"] = true,
			["bluez5.enable-msbc"] = true,
			["bluez5.enable-hw-volume"] = true,
			["bluez5.headset-roles"] = "[ hsp_hs hsp_ag hfp_hf hfp_ag ]"
		}
	'';
};
#services.pipewire.extraConfig.pipewire."92-low-latency" = {
#  context.properties = {
#    default.clock.rate = 48000;
#    default.clock.quantum = 32;
#    default.clock.min-quantum = 32l
#    default.clock.max-quantum = 32;
#  };
#};

### GNOME

# Enable the X11 windowing system
# services.xserver = {
#   enable = true;
#   displayManager.gdm.enable = true;
#   desktopManager.gnome.enable = true;
# };

# ### PLASMA6
# services.xserver.enable = true;
# You may need to comment out "services.displayManager.gdm.enable = true;"
services.xserver.enable = true;
# services.displayManager.sddm.enable = true;
# services.desktopManager.plasma6.enable = true;
services.xserver.displayManager.lightdm = {
  enable = true;
  greeters.slick.enable = true;
};
services.xserver.desktopManager.xfce.enable = true;
# # or 
# # services.xserver.desktopManager.plasma5.enable = true;


  nixpkgs.config.extraPackages = pkgs: {
    popping-dikr = pkgs.callPackage /etc/nixos/packages/popping-dikr.nix { };
  };

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.ibrahimo = {
    isNormalUser = true;
    description = "Ibrahim Ouhamou";
    extraGroups = [ "networkmanager" "wheel" "audio" "libvirtd" "input"];
    packages = with pkgs; [];
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  # pkgs: default channel specified by the user
  # pkgs-stable: stable channel
  # pkgs-unstable: unstable channel
  environment.systemPackages = [
  #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
  pkgs.neovim
  pkgs.kitty
  pkgs.git
  pkgs.zellij
  pkgs.tree
  pkgs.htop
  #  wget

  #alhamdo li Allah neovim-plugins deps
  pkgs.ripgrep
  pkgs.fzf
  pkgs.fd
  pkgs.xclip

  #alhamdo li Allah
  #these are just needed
  pkgs.zip
  pkgs.unzip

  #programming
  # pkgs.libgcc
  # pkgs.gcc
  # pkgs.gnumake
  # pkgs.pkg-config
  # pkgs.gdb
  pkgs.clang
  pkgs-stable.python3
  # pkgs.zig

  #building and testing
  pkgs.qemu
  #wine64Packages.waylandFull
  pkgs.wineWow64Packages.waylandFull

  #wm
  pkgs.swaylock-effects
  pkgs.autotiling  #script to make sway autotile by the will of Allah
  pkgs.wofi	      #application launcher
  pkgs.waybar      #bar
  pkgs.pamixer     #audio
  pkgs.brightnessctl#for brightness
  pkgs.wf-recorder #screen recording we can run 'wf-recorder -a' by the will of Allah
  pkgs.grim	      #screenshot
  pkgs.waypaper
  pkgs.swaybg

  #desktop
  pkgs.pcmanfm
  pkgs.vlc
  #pkgs.popping-dikr
  (pkgs.callPackage /etc/nixos/packages/popping-dikr.nix { })
  # (pkgs.callPackage /etc/nixos/packages/quran-warsh.nix { })
  
  #apps
  pkgs.chromium #web browser
  #obsidian
  pkgs.obsidian
  pkgs.gimp
  pkgs.discord
  pkgs.telegram-desktop
  #bismi Allah
  pkgs.gparted
  pkgs.mupdf #pdf viewer

  pkgs.libreoffice
  pkgs.anki
];

#for obsidian by the will of Allah
#nixpkgs.config.permittedInsecurePackages = [
#  "electron-25.9.0"
#];

fonts.packages = with pkgs; [
  pkgs.font-awesome
# pkgs-stable.nerdfonts
];

programs.sway.enable = true;
xdg.portal.wlr.enable = true;

# programs.wayfire = {
#   enable = true;
#   plugins = with pkgs.wayfirePlugins; [
#     wcm
#     wf-shell
#     wayfire-plugins-extra
#   ];
# };

#bar
# programs.waybar.enable = true;

programs.neovim = {
  enable = true;
  defaultEditor = true;
#  plugins = [ pkgs.vimPlugins.telescope-nvim ];
#telescope-nvim
};

programs.tmux.enable = true;

#virtualisation
virtualisation.libvirtd.enable = true;
programs.virt-manager.enable = true;
services.qemuGuest.enable = true;
#users.users.ibrahimo.extraGroups = ["libvirtd"];

#virtualisation.virtualbox.host.enable = true;
#virtualisation.virtualbox.host.enableExtensionPack = true;
#users.extraGroups.vboxusers.members = [ "user-with-access-to-virtualbox" ];
#programs.virtualbox.enable = true;

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  networking.stevenblack = {
    enable = true;
    block = [ "porn" "gambling" ];
  };

  services.blocky = {
    enable = true;
    settings = {
      ports.dns = 53; # Port for incoming DNS Queries.
      upstreams.groups.default = [
        "https://one.one.one.one/dns-query" # Using Cloudflare's DNS over HTTPS server for resolving queries.
      ];
      listenAddress = [ "127.0.0.1:53" ];  # Listen only on localhost, port 53

      # For initially solving DoH/DoT Requests when no system Resolver is available.
      bootstrapDns = {
        upstream = "https://one.one.one.one/dns-query";
        ips = [ "1.1.1.1" "1.0.0.1" ];
      };
      #Enable Blocking of certain domains.
      blocking = {
        denylists = {
          #Adblocking
          ads = ["https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"];
          #Another filter for blocking adult sites
          adult = ["https://blocklistproject.github.io/Lists/porn.txt"];
          #You can add additional categories
          gambling = ["https://blocklistproject.github.io/Lists/gambling.txt"];

          other = [
                    "https://blocklistproject.github.io/Lists/vaping.txt"
                    # "https://blocklistproject.github.io/Lists/piracy.txt"
                    "https://raw.githubusercontent.com/IbrahimOuhamou/blocklistproject-lists/refs/heads/master/piracy.txt"
                    "https://blocklistproject.github.io/Lists/drugs.txt"
                    "https://blocklistproject.github.io/Lists/malware.txt"
                    "https://blocklistproject.github.io/Lists/scam.txt"
                  ];
        };
        #Configure what block categories are used
        clientGroupsBlock = {
          default = [ "adult" "other" ];
          kids-ipad = [ "adult" ];
        };
      };
    };
  };

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # nix.gc = {
  #   automatic = true;
  #   dates = "00:01";
  # };

  nix.optimise = {
    automatic = true;
    dates = [ "05:00" ];
  };

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "unstable"; # Did you read the comment?

}
